#!/usr/bin/env ruby

STDOUT.sync = true

require 'configuration_parser'
require 'deploy_now_api'
require 'size_checker'
require 'remote_host'
require 'php_alias'
require 'passgen'
require 'date'
require 'template_renderer'
require 'configuration_verifier'
require 'colorize'

deploy_now = DeployNowApi.new(endpoint: ENV['SERVICE_HOST'],
                              api_key: ENV['API_KEY'],
                              project_id: ENV['PROJECT_ID'],
                              branch_id: ENV['BRANCH_ID'])
branch_info = deploy_now.get_branch_info
php_enabled = !branch_info[:php_version].nil?
dist_folder = ENV['DIST_FOLDER']
config = ConfigurationParser.parse(dist_folder: dist_folder, bootstrap: !branch_info.include?(:last_deployment_date))
common_excludes = %w[logs .deploy-now .git .github]

if File.symlink?(dist_folder) && !ENV['INPUT_WORKSPACE'].nil?
  workspace = ENV['INPUT_WORKSPACE'].gsub("'", '')
  if File.readlink(dist_folder).start_with?(workspace)
    FileUtils.ln_sf(File.readlink(dist_folder).gsub(workspace, ''), dist_folder)
  end
end

ConfigurationVerifier.verify(config: config, php_enabled: php_enabled)

ssh_user = { password: Passgen.generate(length: 30, symbols: true) }
database = {}

mutex = Mutex.new
cv = ConditionVariable.new

events_client = deploy_now.get_user_events do |event|
  if event.type == :webspace_user
    data = JSON.parse(event.data)
    if data['id'] == ssh_user[:account_id]
      mutex.synchronize do
        puts "Created temporary user #{data['username']}"
        ssh_user[:username] = data['username']
        cv.signal
      end
    end
  end
  if event.type == :database_user
    data = JSON.parse(event.data)
    if data['id'] == database[:account_id]
      mutex.synchronize do
        puts "Created database user #{data['username']}"
        database[:username] = data['username']
        cv.signal
      end
    end
  end
end

mutex.synchronize do
  puts "Trigger creation of temporary user"
  ssh_user[:account_id] = deploy_now.create_temporary_user(branch_info[:web_space_id], ssh_user[:password])

  if branch_info.include? :database
    puts "Trigger creation of database user"
    database[:host] = branch_info[:database][:host]
    database[:name] = branch_info[:database][:name]
    database[:password] = Passgen.generate(length: 30, symbols: false)
    database[:account_id] = deploy_now.create_database_user(branch_info[:database][:id], database[:password])
  end

  start = DateTime.now

  loop do
    cv.wait(mutex, 120)

    break if ssh_user.include?(:username) && (database.empty? || database.include?(:username))

    if (DateTime.now - start) * 24 * 3600 > 120
      if database.empty?
        abort "Failed to create temporary SSH user".colorize(:red)
      elsif ssh_user.include?(:username)
        abort "Failed to create database user".colorize(:red)
      else
        abort "Failed to create temporary SSH user and database user".colorize(:red)
      end
    end
  end
end

events_client.close

template_renderer = TemplateRenderer.new(files: ENV['RUNTIME_PLACEHOLDER_FILES'] || '')
template_renderer.render(branch_info[:app_url], database)

remote_host = RemoteHost.new(user: ssh_user, host: branch_info[:ssh_host])

SizeChecker.check(dist_folder: config.dist_folder,
                  excludes: common_excludes + config.excludes,
                  allowed_size: branch_info[:storage_quota],
                  user: ssh_user,
                  host: branch_info[:ssh_host])

remote_host.execute(['find . -mindepth 1 -maxdepth 1 -not -name logs | xargs -r rm -r']) unless branch_info.include?(:last_deployment_date)

php_alias = PhpAlias.new(php_version: branch_info[:php_version])

unless php_alias.disabled
  remote_host.execute(php_alias.create_alias_commands)
  remote_host.execute(php_alias.activate_alias_commands)
end

remote_host.execute(config.pre_deployment_remote_commands) unless config.pre_deployment_remote_commands.nil?

remote_host.deploy(dist_folder: config.dist_folder,
                   excludes: common_excludes + config.excludes)

remote_host.execute(php_alias.activate_alias_commands) unless php_alias.disabled
remote_host.execute(config.post_deployment_remote_commands) unless config.post_deployment_remote_commands.nil?

if php_enabled
  puts 'Configure cron jobs'
  deploy_now.configure_cron_jobs(branch_info[:deployment_id], branch_info[:web_space_id], config.cron_jobs)
end

deploy_now.update_deployment_status

puts "Deployment complete :)".colorize(mode: :bold, color: :green)
puts "Visit your site at: ".colorize(mode: :bold, color: :green) + branch_info[:app_url]
